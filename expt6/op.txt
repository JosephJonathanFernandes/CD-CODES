Using grammar from: grammar.txt
Start symbol: S
Original grammar:

S -> S a | b
A -> a b | a c


--- Left Recursion Removal Steps ---
- Direct left recursion detected in S. Creating new non-terminal S' and rewriting productions.

Grammar after left recursion removal:

S -> b S'
A -> a b | a c
S' -> a S' | ε


--- Left Factoring Steps ---
- Left factoring on A: common prefix a found; created A'.

Grammar after left factoring:

S -> b S'
A -> a A'
S' -> a S' | ε
A' -> b | c



Calculated firsts:
first(S) => {b}
first(A) => {a}
first(S') => {a, ε}
first(A') => {b, c}

Calculated follows:
follow(S) => {$}
follow(A) => {}
follow(S') => {$}
follow(A') => {}

Firsts and Follow Result table

Non-T   FIRST         FOLLOW
S       ['b']         ['$']
A       ['a']         []
S'      ['a', 'ε']    ['$']
A'      ['b', 'c']    []

Generated parsing table:

        a         b        c      $
S                 S->b S'
A       A->a A'
S'      S'->a S'                  S'->ε
A'                A'->b    A'->c

Input: b a

Buffer                        Stack                         Action
b a $                         S $                           T[S][b] = S->b S'
b a $                         b S' $
b a $                         b S' $                        Matched:b
a $                           S' $                          T[S'][a] = S'->a S'
a $                           a S' $
a $                           a S' $                        Matched:a
$                             S' $                          T[S'][$] = S'->ε
$                             $
$                             $                             Accept

Parse result: Accepted